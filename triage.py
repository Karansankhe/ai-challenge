# -*- coding: utf-8 -*-
"""triage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MV1lm7aecZ109sIbDo8zAzKbjUI9U8Jr
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report

# Generate synthetic data
np.random.seed(42)

# Define sample features
num_samples = 1000

# Age distribution with higher risk for older individuals
age = np.random.normal(loc=50, scale=15, size=num_samples).astype(int)
age = np.clip(age, 18, 80)

# Vital signs
heart_rate = np.random.normal(loc=75, scale=10, size=num_samples).astype(int)
blood_pressure = np.random.normal(loc=120, scale=10, size=num_samples).astype(int)
temperature = np.random.normal(loc=37, scale=0.5, size=num_samples)

# Chronic conditions
diabetes = np.random.choice([0, 1], num_samples, p=[0.9, 0.1])
hypertension = np.random.choice([0, 1], num_samples, p=[0.8, 0.2])
respiratory_issues = np.random.choice([0, 1], num_samples, p=[0.85, 0.15])

# Create a DataFrame
data = pd.DataFrame({
    'Age': age,
    'HeartRate': heart_rate,
    'BloodPressure': blood_pressure,
    'Temperature': temperature,
    'Diabetes': diabetes,
    'Hypertension': hypertension,
    'RespiratoryIssues': respiratory_issues
})

# Add severity as a target variable
# Adjust severity based on age and chronic conditions
data['Severity'] = 1  # Default severity
data.loc[(data['Age'] > 60) | (data['Diabetes'] == 1) | (data['Hypertension'] == 1) | (data['RespiratoryIssues'] == 1), 'Severity'] = 2  # Higher severity for older individuals or those with chronic conditions

# Split the data into features (X) and target variable (y)
X = data.drop('Severity', axis=1)
y = data['Severity']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the decision tree classifier
model = DecisionTreeClassifier(random_state=42)

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print("Classification Report:\n", report)
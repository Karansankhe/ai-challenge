# -*- coding: utf-8 -*-
"""Feature2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HT6W5K134CkQb9TsqF2p9bJgrZiASkBR
"""

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

class HealthAssistantML:
    def __init__(self):
        self.heart_rate_data = []
        self.model = LinearRegression()

    def collect_heart_rate_data(self):
        # Simulate collecting heart rate data (replace with real data source)
        new_data_point = np.random.randint(60, 100)
        self.heart_rate_data.append(new_data_point)
        print(f"Collected new heart rate data: {new_data_point}")

    def train_model(self):
        X = np.arange(1, len(self.heart_rate_data) + 1).reshape(-1, 1)
        y = np.array(self.heart_rate_data)

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        self.model.fit(X_train, y_train)

        # Evaluate the model
        y_pred = self.model.predict(X_test)
        print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred)}")

    def predict_heart_rate(self, time_point):
        heart_rate_prediction = self.model.predict(np.array([[time_point]]))
        print(f"Predicted heart rate at time {time_point}: {heart_rate_prediction[0]}")

    def visualize_data_and_prediction(self):
        X = np.arange(1, len(self.heart_rate_data) + 1).reshape(-1, 1)
        y_actual = np.array(self.heart_rate_data)
        y_prediction = self.model.predict(X)

        plt.scatter(X, y_actual, label="Actual Data")
        plt.plot(X, y_prediction, label="Linear Regression Prediction", color='red')
        plt.xlabel('Time')
        plt.ylabel('Heart Rate')
        plt.legend()
        plt.show()

    def run(self):
        for _ in range(10):  # Simulate 10 data collection iterations
            self.collect_heart_rate_data()

        self.train_model()

        # Predict heart rate at a future time point
        future_time_point = len(self.heart_rate_data) + 1
        self.predict_heart_rate(future_time_point)

        # Visualize data and prediction
        self.visualize_data_and_prediction()

if __name__ == "__main__":
    health_assistant_ml = HealthAssistantML()
    health_assistant_ml.run()